# yaml-language-server: $schema=https://schemastore.org/yamllint.json
# Example format and required fields
  # - name: 
  #   description: 
  #   action: 
  #   verification: 
  #   exit_code: 
---
title: Understanding File Attributes
section: Managing Files and Directories
tasks:

  - name: Making directories
    description: |
      The `mkdir` command is used to create new directories. It is a
      fundamental command for organizing your filesystem.
    action: |
      Let's create a new directory in your home folder.

      `mkdir ~/new_directory`
      `ls -l ~`
    verification: ls -ld ~/new_directory
    exit_code: 0

  - name: Making files
    description: |
      The `touch` command is used to create a new, empty file or update
      the timestamp of an existing file.
    action: |
      Let's create a new file in the directory you just made.

      `touch ~/new_directory/my_file.txt`
      `ls -l ~/new_directory`
    verification: ls ~/new_directory/my_file.txt
    exit_code: 0

  - name: Copying files and directories
    description: |
      The `cp` command is used to copy files and directories. The format is
      `cp [source] [destination]`. When copying directories, you must use
      the `-r` (recursive) option.
    action: |
      Let's copy the file you just created.

      1. Copy `my_file.txt` to a new file named `my_file_copy.txt`:
         `cp ~/new_directory/my_file.txt ~/new_directory/my_file_copy.txt`
      2. Verify both files exist:
         `ls -l ~/new_directory`
      3. Copy the directory
         `cp -r ~/new_directory ~/new_directory_copy`
      4. Verify both directories exist:
         `ls -dl ~/new_directory*`
    verification: ls -l ~/new_directory/my_file_copy.txt
    exit_code: 0

  - name: Moving and renaming files and directories
    description: |
      The `mv` command is used to move files and directories. When the destination
      is a new name in the same directory, it effectively renames the file.
      The format is `mv [source] [destination]`.
    action: |
      Let's rename the file you just copied.

      1. Rename `my_file_copy.txt` to `my_file_renamed.txt`:
         `mv ~/new_directory/my_file_copy.txt ~/new_directory/my_file_renamed.txt`
      2. Verify the new name:
         `ls -l ~/new_directory`
    verification: ls -l ~/new_directory/my_file_renamed.txt
    exit_code: 0

  - name: Deleting files
    description: |
      The `rm` command (remove) is used to delete files. By default, it
      does not prompt for confirmation. Use with caution!
    action: |
      Let's delete the `my_file_renamed.txt` file you created.

      1. Delete the file:
         `rm ~/new_directory/my_file_renamed.txt`
      2. Verify the file is gone:
         `ls -l ~/new_directory`
    verification: ls -l ~/new_directory/my_file_renamed.txt
    exit_code: 1

  - name: Deleting directories
    description: |
      To delete a directory, you must use `rm` with the `-r` (recursive) option.
      This deletes the directory and all of its contents.
    action: |
      Let's delete the `new_directory` you created.

      1. Delete the directory:
         `rm -r ~/new_directory`
      2. Verify the directory is gone:
         `ls -l ~`
    verification: ls -ld ~/new_directory
    exit_code: 1

  - name: Making symbolic links
    description: |
      The `ln` command (link) creates a link to a file. A symbolic link (or soft link)
      is a file that points to another file or directory by its name. The
      format is `ln -s [target] [link_name]`.
    action: |
      Let's create a symbolic link to the `/etc/passwd` file in your home directory.

      1. Create the link:
         `ln -s /etc/passwd ~/passwd_link`
      2. Use `ls -l` to see the link:
         `ls -l ~/passwd_link`
    verification: ls -l ~/passwd_link | grep -q "/etc/passwd"
    exit_code: 0

  - name: Making hard links
    description: |
      A **hard link** is a direct pointer to a file's data on the disk.
      Multiple hard links to the same file share the exact same content
      and inode number. Deleting a hard link does not delete the file
      until the last link is removed.

      The `ln` command is used to create hard links.
    action: |
      Let's create a file and then make a hard link to it.

      1. Create a file and check its inode number (`-i`):
         `touch ~/my_original_file.txt`
         `ls -li ~/my_original_file.txt`

      2. Create a hard link to the file:
         `ln ~/my_original_file.txt ~/my_hard_link.txt`

      3. Now, check both files. They should have the same inode number.
         `ls -li ~/my_original_file.txt ~/my_hard_link.txt`
    verification: SKIP_CHECK
    exit_code: 0

...