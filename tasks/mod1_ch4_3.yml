# yaml-language-server: $schema=https://schemastore.org/yamllint.json
# Example format and required fields
  # - name: 
  #   description: 
  #   action: 
  #   verification: 
  #   exit_code: 
---
title: Understanding File Attributes
section: Packaging and Archiving Files
tasks:

  - name: Archiving (tar)
    description: |
      The `tar` command is used to create archives of files and directories.
      It can be used with a single file or a whole directory.

      The format is:

        tar [options] [source] [destination]

    action: |
      Let's create an archive of a file and a directory.

      1. Create a test directory:
         `mkdir ~/dir1`
      2. Create a test file in the directory:
         `touch ~/dir1/file1.txt`
      3. Create an archive of the file and directory:
         `tar -cvf archive.tar dir1/`
      4. Create a new file outside the directory:
         `touch ~/file2.txt`
      5. Add the new file to the archive:
         `tar -cvf archive.tar dir1/ file2.txt`
      6. List the contents of the archive:
         `tar -tf archive.tar`
      8. Create a new archive file but with compression
         `tar -czvf archive_compressed.tar.gz dir1/ file2.txt`
      9. List the two archived files and compare their size.
         `du -sh archive*`
    verification: ls -l ~/archive.tar.gz
    exit_code: 0

  - name: Unarchive and decompress files (tar)
    description: |
      To unarchive use `-x` and `-z` to decompress
    action: |
      1. Remove the dir1 directory and the file2.txt:
         `rm -rf ~/dir1/ file2.txt`
      2. Extract your compressed archive:
         `tar -xvzf ~/archive_compressed.tar.gz`
      3. Verify that your files are there:
         `ls -l ~/dir1/ file2.txt`
      4. Extract the archive into a new 'backups' directory:
         `mkdir ~/backups`
         `tar -xvf ~/archive.tar -C ~/backups/`
         `tree ~/backups/`

         The `-C` option specifies the destination directory
    verification: ls ~/unarchive_test | grep -q "file1.txt"
    exit_code: 0

  - name: Compressing (gzip) and Decompressing (gunzip)
    description: |
      The `gzip` command compresses a single file, replacing the original
      with a compressed file ending in `.gz`. `gunzip` decompresses it.
    action: |
      1. Create a test file:
         `touch ~/testfile.txt`
      2. Compress it with `gzip`:
         `gzip ~/testfile.txt`
      3. Decompress it with `gunzip`:
         `gunzip ~/testfile.txt.gz`
    verification: ls -l ~/testfile.txt
    exit_code: 0

  - name: Compressing (bzip2) and decompressing (bzip2)
    description: |
      The `bzip2` command is another compression utility, similar to `gzip`,
      but it often provides better compression at the cost of being slower.
      It creates files ending in `.bz2`.
    action: |
      1. Create a test file:
         `touch ~/testfile2.txt`
      2. Compress it with `bzip2`:
         `bzip2 ~/testfile2.txt`
      3. Decompress it with `bunzip2`:
         `bunzip2 ~/testfile2.txt.bz2`
    verification: ls -l ~/testfile2.txt
    exit_code: 0

  - name: Compressing (zip) and decompressing (zip)
    description: |
      The `zip` command is a popular utility for creating compressed archives
      that can contain multiple files and directories. `unzip` is used for
      extracting them.
    action: |
      1. Create a directory with a few files:
         `mkdir ~/zip_test && cd ~/zip_test`
         `touch file1.txt file2.txt`
      2. Create a zip archive:
         `zip -r my_archive.zip .`
      3. Extract the archive into a new location:
         `mkdir ~/unzip_test`
         `unzip my_archive.zip -d ~/unzip_test`
    verification: ls -l ~/unzip_test | grep -q "file1.txt"
    exit_code: 0

  - name: Compressing (xz) and decompressing (xz)
    description: |
      `xz` is a powerful compression utility that uses the LZMA2 algorithm.
      It generally provides the best compression ratio but is slower than
      `gzip` and `bzip2`. Files compressed with `xz` end with `.xz`.
    action: |
      1. Create a test file:
         `touch ~/testfile3.txt`
      2. Compress it with `xz`:
         `xz ~/testfile3.txt`
      3. Decompress it with `unxz`:
         `unxz ~/testfile3.txt.xz`
    verification: ls -l ~/testfile3.txt
    exit_code: 0

  - name: Synchronizing files (rsync)
    description: |
      The `rsync` command is a versatile tool for synchronizing files and
      directories, locally or remotely. It is highly efficient because it
      only transfers the differences between the source and destination files.
    action: |
      Let's synchronize a local directory to another directory.

      1. Create a local test directory with a file:
         `mkdir ~/sync_test`
         `echo "Hello" > ~/sync_test/file1.txt`
      2. Create another directory to synchronize to:
         `mkdir ~/sync_backup/`
      3. Run `rsync` to synchronize the backup directory:
         `rsync -avz ~/sync_test/ ~/sync_backup/`
      4. Create a new file in the local directory:
         `echo "World" > ~/sync_test/file2.txt`
      5. Run `rsync` again to synchronize the backup directory:
         `rsync -avz ~/sync_test/ ~/sync_backup/`
      6. The same process can be applied to a remote host:
         `rsync -avz ~/sync_test/ <user>@<host>:/path/to/remote/dir`
    verification: SKIP_CHECK
    exit_code: 0

...